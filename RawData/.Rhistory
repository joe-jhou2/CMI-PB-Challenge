install.packages('Seurat')
install.packages('Seurat')
install.packages('Seurat')
install.packages('Seurat')
install.packages('Seurat')
devtools::install_github("saeyslab/nichenetr")
install.packages('Seurat')
getwd()
.libpaths()
setwd("/home/jhou2/R")
library(Seurat)
setwd("/home/jhou2/R/x86_64-pc-linux-gnu-library")
library(Seurat)
library(Seurat)
library(glmGamPoi) # SCT v2
install.packages('Seurat')
library(Seurat)
library(SeuratDisk)
library(glmGamPoi) # SCT v2
library(DoubletFinder) # paramSweep_v3()
library(SoupX) # Re
library(limma)
library(Seurat)
library(CellChat)
library(liana)
library(DoubletFinder)
library(SoupX)
library(scCustomize)
library(cols4all)
library(plot1cell)
q("no")
library(Seurat)
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(tidyverse)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(patchwork)
library(plot1cell)
library(ggforce)
library(xlsx)
library(dplyr)
library(org.Hs.eg.db)
library(clusterProfiler)
BiocManager::install("clusterProfiler")
library(clusterProfiler)
BiocManager::install("GOSemSim")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
library(GOSemSim)
library(DOSE)
library(GOSemSim)
library(GOSemSim)
log2(1.3)
log2(1.2)
install.packages("SuperLearner")
install.packages(c("caret", "glmnet", "randomForest", "ggplot2", "RhpcBLASctl"))
install.packages("xgboost", repos=c("http://dmlc.ml/drat/", getOption("repos")), type="source")
library(SuperLearner)
listWrappers()
SL.glmnet
# Multicore parallelization
# There are two ways to use multiple cores in R: the "multicore" system and the "snow" system.
# Setup parallel computation - use all cores on our computer.
(num_cores = RhpcBLASctl::get_num_cores())
setwd("/Users/jhou2/Documents/CMI_PB/DataSet")
# load libraries
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(tidyverse)
library(dplyr)
library(reshape2)
library(RColorBrewer)
library(patchwork)
library(ggh4x)
library(rstatix)
library(ggdist)
library(xlsx)
library(funkyheatmap)
library(tibble)
library(kableExtra)
#-----------------------------------------------------------------------------------------#
# subject intersection across assays
#-----------------------------------------------------------------------------------------#
Specimen_info_2020 = read.csv("Training/2020LD_specimen.tsv", sep = "\t")
Specimen_info_2021 = read.csv("Training/2021LD_specimen.tsv", sep = "\t")
# two datasets have the same data format, combine them
Specimen_info = rbind(Specimen_info_2020, Specimen_info_2021)
View(Specimen_info)
#-----------------------------------------------------------------------------------------#
# subject intersection across assays
#-----------------------------------------------------------------------------------------#
Specimen_info_2020 = read.csv("Training/2020LD_specimen.tsv", sep = "\t"); Specimen_info_2020$Year = "2020"
Specimen_info_2021 = read.csv("Training/2021LD_specimen.tsv", sep = "\t"); Specimen_info_2021$Year = "2021"
# two datasets have the same data format, combine them
Specimen_info = rbind(Specimen_info_2020, Specimen_info_2021)
View(Specimen_info)
#
Specimen_info$RNAseq
Specimen_info$CellFreq
Specimen_info$Ab
Specimen_info$Cytokine
View(Specimen_info)
Specimen_info$RNAseq = NA
Specimen_info$CellFreq = NA
Specimen_info$Ab = NA
Specimen_info$Cytokine = NA
View(Specimen_info)
RNAseq_2020 = read.csv("Training/2020LD_pbmc_gene_expression.tsv", sep = "\t")
View(RNAseq_2020)
unique(RNAseq_2020$specimen_id)
RNAseq_2021 = read.csv("Training/2021LD_pbmc_gene_expression.tsv", sep = "\t")
c(unique(RNAseq_2020$specimen_id),unique(RNAseq_2021$specimen_id))
i=c(unique(RNAseq_2020$specimen_id),unique(RNAseq_2021$specimen_id))[1]
which(Specimen_info$specimen_id == i)
for (i in c(unique(RNAseq_2020$specimen_id),unique(RNAseq_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"RNAseq"] = 1
}
CellFreq_2020 = read.csv("Training/2020LD_pbmc_cell_frequency.tsv", sep = "\t")
CellFreq_2021 = read.csv("Training/2021LD_pbmc_cell_frequency.tsv", sep = "\t")
head(CellFreq_2020)
CellFreq_2020 = read.csv("Training/2020LD_pbmc_cell_frequency.tsv", sep = "\t")
CellFreq_2021 = read.csv("Training/2021LD_pbmc_cell_frequency.tsv", sep = "\t")
for (i in c(unique(CellFreq_2020$specimen_id),unique(CellFreq_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"CellFreq"] = 1
}
Ab_2020 = read.csv("Training/2020LD_plasma_ab_titer.tsv", sep = "\t")
Ab_2021 = read.csv("Training/2021LD_plasma_ab_titer.tsv", sep = "\t")
head(Ab_2020)
for (i in c(unique(Ab_2020$specimen_id),unique(Ab_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"Ab"] = 1
}
Cytokine_2020 = read.csv("Training/2020LD_plasma_cytokine_concentration.tsv", sep = "\t")
Cytokine_2021 = read.csv("Training/2021LD_plasma_cytokine_concentration.tsv", sep = "\t")
head(Cytokine_2021)
for (i in c(unique(Cytokine_2020$specimen_id),unique(Cytokine_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"Cytokine"] = 1
}
setdiff(unique(Cytokine_2020$specimen_id),unique(Cytokine_2021$specimen_id))
intersect(unique(Cytokine_2020$specimen_id),unique(Cytokine_2021$specimen_id))
intersect(unique(Ab_2020$specimen_id),unique(Ab_2021$specimen_id))
c(unique(RNAseq_2020$specimen_id),unique(RNAseq_2021$specimen_id)))
c(unique(RNAseq_2020$specimen_id),unique(RNAseq_2021$specimen_id))
118-96
Specimen_info$RNAseq != NA
is.na(Specimen_info$RNAseq)
Specimen_info[!is.na(Specimen_info$RNAseq),]
unique(Specimen_info[!is.na(Specimen_info$RNAseq),]$subject_id)
len(unique(Specimen_info[!is.na(Specimen_info$RNAseq),]$subject_id))
length(unique(Specimen_info[!is.na(Specimen_info$RNAseq),]$subject_id))
# how many subjects have RNAseq data
RNAseq_avail = unique(Specimen_info[!is.na(Specimen_info$RNAseq),]$subject_id)
length(RNAseq_avail)
# how many subjects have CellFreq data
CellFreq_avail = unique(Specimen_info[!is.na(Specimen_info$CellFreq),]$subject_id)
length(CellFreq_avail)
# how many subjects have Ab data
Ab_avail = unique(Specimen_info[!is.na(Specimen_info$Ab),]$subject_id)
length(Ab_avail)
# how many subjects have Ab data
Cytokine_avail = unique(Specimen_info[!is.na(Specimen_info$Cytokine),]$subject_id)
length(Cytokine_avail)
RNAseq_2022 = read.csv("Prediction/20221LD_pbmc_gene_expression.tsv", sep = "\t")
RNAseq_2022 = read.csv("Prediction/20221BD_pbmc_gene_expression.tsv", sep = "\t")
RNAseq_2022 = read.csv("Prediction/2022BD_pbmc_gene_expression.tsv", sep = "\t")
unique(RNAseq_2022$specimen_id)
length(unique(RNAseq_2022$specimen_id))
length(unique(RNAseq_2022$specimen_id))/5
length(unique(RNAseq_2022$specimen_id))/4
length(RNAseq_avail)
length(CellFreq_avail)
Specimen_info_2022 = read.csv("Prediction/2022BD_specimen.tsv", sep = "\t"); Specimen_info_2021$Year = "2021"
Specimen_info_2022$RNAseq = NA
Specimen_info_2022$CellFreq = NA
Specimen_info_2022$Ab = NA
Specimen_info_2022$Cytokine = NA
for (i in c(unique(RNAseq_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"RNAseq"] = 1
}
# how many subjects have RNAseq data
Testing_RNAseq_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$RNAseq),]$subject_id)
length(Testing_RNAseq_avail)
CellFreq_2022 = read.csv("Prediction/2022BD_pbmc_cell_frequency.tsv", sep = "\t")
for (i in c(unique(CellFreq_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"CellFreq"] = 1
}
# how many subjects have CellFreq data
Testing_CellFreq_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$CellFreq),]$subject_id)
length(Testing_CellFreq_avail)
length(CellFreq_avail)
Ab_2022 = read.csv("Prediction/2022BD_plasma_ab_titer.tsv", sep = "\t")
for (i in c(unique(Ab_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"Ab"] = 1
}
# how many subjects have Ab data
Testing_Ab_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$Ab),]$subject_id)
length(Testing_Ab_avail)
length(Ab_avail)
Cytokine_2022 = read.csv("Prediction/2022BD_plasma_cytokine_concentration.tsv", sep = "\t")
for (i in c(unique(Cytokine_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info$specimen_id == i),"Cytokine"] = 1
}
# how many subjects have Ab data
Testing_Cytokine_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$Cytokine),]$subject_id)
length(Testing_Cytokine_avail)
Cytokine_2022
for (i in c(unique(Cytokine_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info$specimen_id == i),"Cytokine"] = 1
}
View(Specimen_info_2022)
unique(Cytokine_2022$specimen_id))
unique(Cytokine_2022$specimen_id)
for (i in c(unique(Cytokine_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"Cytokine"] = 1
}
# how many subjects have Ab data
Testing_Cytokine_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$Cytokine),]$subject_id)
length(Testing_Cytokine_avail)
length(Cytokine_avail)
for (i in c(unique(RNAseq_2020$specimen_id),unique(RNAseq_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"RNAseq"] = 1
}
# Testing dataset
for (i in c(unique(RNAseq_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"RNAseq"] = 1
}
# how many subjects have RNAseq data
Training_RNAseq_avail = unique(Specimen_info[!is.na(Specimen_info$RNAseq),]$subject_id)
print("Traing dataset, RNAseq array", length(Training_RNAseq_avail))
print(paste("Traing dataset, RNAseq array", length(Training_RNAseq_avail)), sep = ":")
print(paste("Traing dataset, RNAseq array: ", length(Training_RNAseq_avail)), "subjects", sep = "")
print(paste("Traing dataset, RNAseq array: ", length(Training_RNAseq_avail), "subjects", sep = ""))
print(paste("Testing dataset, RNAseq array: ", length(Testing_RNAseq_avail), " subjects", sep = ""))
# Training dataset
for (i in c(unique(CellFreq_2020$specimen_id),unique(CellFreq_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"CellFreq"] = 1
}
# Testing dataset
for (i in c(unique(CellFreq_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"CellFreq"] = 1
}
# Training dataset
for (i in c(unique(Ab_2020$specimen_id),unique(Ab_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"Ab"] = 1
}
# Testing dataset
for (i in c(unique(Ab_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"Ab"] = 1
}
# Training dataset
for (i in c(unique(Cytokine_2020$specimen_id),unique(Cytokine_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"Cytokine"] = 1
}
# Testing dataset
for (i in c(unique(Cytokine_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"Cytokine"] = 1
}
# how many subjects have Ab data
Training_Cytokine_avail = unique(Specimen_info[!is.na(Specimen_info$Cytokine),]$subject_id)
print(paste("Traing dataset, Cytokine array: ", length(Training_Cytokine_avail), " subjects", sep = ""))
Testing_Cytokine_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$Cytokine),]$subject_id)
print(paste("Testing dataset, Cytokine array: ", length(Testing_Cytokine_avail), " subjects", sep = ""))
Training_Ab_avail = unique(Specimen_info[!is.na(Specimen_info$Ab),]$subject_id)
print(paste("Traing dataset, Ab titer array: ", length(Training_Ab_avail), " subjects", sep = ""))
Testing_Ab_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$Ab),]$subject_id)
print(paste("Testing dataset, Ab titer array: ", length(Testing_Ab_avail), " subjects", sep = ""))
Training_CellFreq_avail = unique(Specimen_info[!is.na(Specimen_info$CellFreq),]$subject_id)
print(paste("Traing dataset, Cell Frequency array: ", length(Training_CellFreq_avail), " subjects", sep = ""))
Testing_CellFreq_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$CellFreq),]$subject_id)
print(paste("Testing dataset, Cell Frequency array: ", length(Testing_CellFreq_avail), " subjects", sep = ""))
# how many subjects have RNAseq data
Training_RNAseq_avail = unique(Specimen_info[!is.na(Specimen_info$RNAseq),]$subject_id)
print(paste("Traing dataset, RNAseq array: ", length(Training_RNAseq_avail), " subjects", sep = ""))
Testing_RNAseq_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$RNAseq),]$subject_id)
print(paste("Testing dataset, RNAseq array: ", length(Testing_RNAseq_avail), " subjects", sep = ""))
Training_RNAseq_avail
print(paste("Traing dataset, RNAseq array: ", length(Training_RNAseq_avail), " subjects", sep = ""))
print(paste("Testing dataset, RNAseq array: ", length(Testing_RNAseq_avail), " subjects", sep = ""))
print(paste("Traing dataset, Cell Frequency array: ", length(Training_CellFreq_avail), " subjects", sep = ""))
print(paste("Testing dataset, Cell Frequency array: ", length(Testing_CellFreq_avail), " subjects", sep = ""))
print(paste("Traing dataset, Ab titer array: ", length(Training_Ab_avail), " subjects", sep = ""))
print(paste("Testing dataset, Ab titer array: ", length(Testing_Ab_avail), " subjects", sep = ""))
print(paste("Traing dataset, Cytokine array: ", length(Training_Cytokine_avail), " subjects", sep = ""))
print(paste("Testing dataset, Cytokine array: ", length(Testing_Cytokine_avail), " subjects", sep = ""))
Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), ]
Veiw(Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), ])
View(Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), ])
View(Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), "subject_id"])
Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), "subject_id"]
unique(Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), "subject_id"])
length(unique(Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), "subject_id"]))
View(Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), "subject_id"])
View(Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), ])
#-----------------------------------------------------------------------------------------#
# explore time point data
#-----------------------------------------------------------------------------------------#
# read time point data
Specimen_2020 = read.csv("Training/2020LD_specimen.tsv", sep = "\t"); Specimen_2020$dataset = "2020_dataset"
Specimen_2021 = read.csv("Training/2021LD_specimen.tsv", sep = "\t"); Specimen_2021$dataset = "2021_dataset"
# two datasets have the same data format, combine them
Specimen_info = rbind(Specimen_2020, Specimen_2021)
Specimen_info$subject_id = paste("PID", Specimen_info$subject_id, sep = "_")
Specimen_info$visit = paste("v", Specimen_info$visit, sep = "")
# only keep Subject and Status
data_sel = Specimen_info[,c(2,6)]
data_sel
Specimen_info
head(Specimen_info)
Specimen_info_2020 = read.csv("Training/2020LD_specimen.tsv", sep = "\t"); Specimen_info_2020$Year = "2020"
Specimen_info_2021 = read.csv("Training/2021LD_specimen.tsv", sep = "\t"); Specimen_info_2021$Year = "2021"
Specimen_info_2022 = read.csv("Prediction/2022BD_specimen.tsv", sep = "\t"); Specimen_info_2021$Year = "2021"
# two datasets have the same data format, combine them
Specimen_info = rbind(Specimen_info_2020, Specimen_info_2021)
# add cols to store assay availability
Specimen_info$RNAseq = NA
Specimen_info$CellFreq = NA
Specimen_info$Ab = NA
Specimen_info$Cytokine = NA
Specimen_info_2022$RNAseq = NA
Specimen_info_2022$CellFreq = NA
Specimen_info_2022$Ab = NA
Specimen_info_2022$Cytokine = NA
#------------------#
# check RNAseq data
#------------------#
RNAseq_2020 = read.csv("Training/2020LD_pbmc_gene_expression.tsv", sep = "\t")
RNAseq_2021 = read.csv("Training/2021LD_pbmc_gene_expression.tsv", sep = "\t")
RNAseq_2022 = read.csv("Prediction/2022BD_pbmc_gene_expression.tsv", sep = "\t")
# Training dataset
for (i in c(unique(RNAseq_2020$specimen_id),unique(RNAseq_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"RNAseq"] = 1
}
# Testing dataset
for (i in c(unique(RNAseq_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"RNAseq"] = 1
}
# how many subjects have RNAseq data
Training_RNAseq_avail = unique(Specimen_info[!is.na(Specimen_info$RNAseq),]$subject_id)
print(paste("Traing dataset, RNAseq array: ", length(Training_RNAseq_avail), " subjects", sep = ""))
Testing_RNAseq_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$RNAseq),]$subject_id)
print(paste("Testing dataset, RNAseq array: ", length(Testing_RNAseq_avail), " subjects", sep = ""))
#------------------#
# check CellFreq data
#------------------#
CellFreq_2020 = read.csv("Training/2020LD_pbmc_cell_frequency.tsv", sep = "\t")
CellFreq_2021 = read.csv("Training/2021LD_pbmc_cell_frequency.tsv", sep = "\t")
CellFreq_2022 = read.csv("Prediction/2022BD_pbmc_cell_frequency.tsv", sep = "\t")
# Training dataset
for (i in c(unique(CellFreq_2020$specimen_id),unique(CellFreq_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"CellFreq"] = 1
}
# Testing dataset
for (i in c(unique(CellFreq_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"CellFreq"] = 1
}
# how many subjects have CellFreq data
Training_CellFreq_avail = unique(Specimen_info[!is.na(Specimen_info$CellFreq),]$subject_id)
print(paste("Traing dataset, Cell Frequency array: ", length(Training_CellFreq_avail), " subjects", sep = ""))
Testing_CellFreq_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$CellFreq),]$subject_id)
print(paste("Testing dataset, Cell Frequency array: ", length(Testing_CellFreq_avail), " subjects", sep = ""))
#------------------#
# check Ab data
#------------------#
Ab_2020 = read.csv("Training/2020LD_plasma_ab_titer.tsv", sep = "\t")
Ab_2021 = read.csv("Training/2021LD_plasma_ab_titer.tsv", sep = "\t")
Ab_2022 = read.csv("Prediction/2022BD_plasma_ab_titer.tsv", sep = "\t")
# Training dataset
for (i in c(unique(Ab_2020$specimen_id),unique(Ab_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"Ab"] = 1
}
# Testing dataset
for (i in c(unique(Ab_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"Ab"] = 1
}
# how many subjects have Ab data
Training_Ab_avail = unique(Specimen_info[!is.na(Specimen_info$Ab),]$subject_id)
print(paste("Traing dataset, Ab titer array: ", length(Training_Ab_avail), " subjects", sep = ""))
Testing_Ab_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$Ab),]$subject_id)
print(paste("Testing dataset, Ab titer array: ", length(Testing_Ab_avail), " subjects", sep = ""))
#------------------#
# check Cytokine data
#------------------#
Cytokine_2020 = read.csv("Training/2020LD_plasma_cytokine_concentration.tsv", sep = "\t")
Cytokine_2021 = read.csv("Training/2021LD_plasma_cytokine_concentration.tsv", sep = "\t")
Cytokine_2022 = read.csv("Prediction/2022BD_plasma_cytokine_concentration.tsv", sep = "\t")
# Training dataset
for (i in c(unique(Cytokine_2020$specimen_id),unique(Cytokine_2021$specimen_id))){
Specimen_info[which(Specimen_info$specimen_id == i),"Cytokine"] = 1
}
# Testing dataset
for (i in c(unique(Cytokine_2022$specimen_id))){
Specimen_info_2022[which(Specimen_info_2022$specimen_id == i),"Cytokine"] = 1
}
# how many subjects have Ab data
Training_Cytokine_avail = unique(Specimen_info[!is.na(Specimen_info$Cytokine),]$subject_id)
print(paste("Traing dataset, Cytokine array: ", length(Training_Cytokine_avail), " subjects", sep = ""))
Testing_Cytokine_avail = unique(Specimen_info_2022[!is.na(Specimen_info_2022$Cytokine),]$subject_id)
print(paste("Testing dataset, Cytokine array: ", length(Testing_Cytokine_avail), " subjects", sep = ""))
length(unique(Specimen_info[!(is.na(Specimen_info$RNAseq)) & !(is.na(Specimen_info$CellFreq)) & !(is.na(Specimen_info$Ab)) & !(is.na(Specimen_info$Cytokine)), "subject_id"]))
Specimen_info$subject_id
Specimen_info$subject_id = paste("PID", Specimen_info$subject_id, sep = "_")
Specimen_info$visit = paste("v", Specimen_info$visit, sep = "")
View(Specimen_info)
# only keep Subject and Status
data_sel = Specimen_info[,c(2,6, 8, 9, 10, 11)]
View(data_sel)
# only keep Subject and Status
data_sel = Specimen_info[,c(2, 6, 8)]
# convert long to wide format
data_sel = data_sel %>%
tidyr::pivot_wider(names_from = visit, values_from = RNAseq)
View(data_sel)
# only keep Subject and Status
RNAseq_sel = Specimen_info[,c(2, 6, 8)]
CellFreq_sel = Specimen_info[,c(2, 6, 9)]
Ab_sel = Specimen_info[,c(2, 6, 10)]
Cytokine_sel = Specimen_info[,c(2, 6, 11)]
CellFreq_sel = CellFreq_sel %>%
tidyr::pivot_wider(names_from = visit, values_from = CellFreq)
Ab_sel = Ab_sel %>%
tidyr::pivot_wider(names_from = visit, values_from = Ab)
Cytokine_sel = Cytokine_sel %>%
tidyr::pivot_wider(names_from = visit, values_from = Cytokine)
View(Ab_sel)
table(RNAseq_sel)
is.na(RNAseq_sel)
funky_heatmap(RNAseq_sel, column_info = column_info, scale_column = FALSE,
palettes =  list(palette1 = "#0F9D58", palette2 = "#DB4437", palette3 = "#F4B400", palette4 = "#B00068",
palette5 = "#2ED9FF",  palette6 = "#F7E1A0", palette7 = "#D85FF7",  palette8 = "#16FF32",
palette9 = "#FF00B6", palette10 = "#0000FF", palette11 = "#AAF400"),
expand = list(xmax = 1), col_annot_angle = 90)
# prepare column info
column_info = tribble(
~id,         ~group,      ~name,    ~geom,            ~palette,           ~options,
"subject_id",      "",       "",       "text",           NA,                 list(hjust = 0, width = 3),
"v1",       "",       "v1",     "funkyrect",     "palette1",          list(),
"v2",       "",       "v2",     "funkyrect",     "palette2",          list(),
"v3",       "",       "v3",     "funkyrect",     "palette3",          list(),
"v4",       "",       "v4",     "funkyrect",     "palette4",          list(),
"v5",       "",       "v5",     "funkyrect",     "palette5",          list(),
"v6",       "",       "v6",     "funkyrect",     "palette6",          list(),
"v7",       "",       "v7",     "funkyrect",     "palette7",          list(),
"v8",       "",       "v8",     "funkyrect",     "palette8",          list(),
"v9",       "",       "v9",     "funkyrect",     "palette9",          list(),
"v10",      "",      "v10",     "funkyrect",     "palette10",         list(),
"v11",      "",      "v11",     "funkyrect",     "palette11",         list(),
)
funky_heatmap(RNAseq_sel, column_info = column_info, scale_column = FALSE,
palettes =  list(palette1 = "#0F9D58", palette2 = "#DB4437", palette3 = "#F4B400", palette4 = "#B00068",
palette5 = "#2ED9FF",  palette6 = "#F7E1A0", palette7 = "#D85FF7",  palette8 = "#16FF32",
palette9 = "#FF00B6", palette10 = "#0000FF", palette11 = "#AAF400"),
expand = list(xmax = 1), col_annot_angle = 90)
head(RNAseq_sel)
View(RNAseq_sel)
# convert long to wide format
RNAseq_sel = RNAseq_sel %>%
tidyr::pivot_wider(names_from = visit, values_from = RNAseq)
View(RNAseq_sel)
View(CellFreq_sel)
# prepare column info
column_info = tribble(
~id,         ~group,      ~name,    ~geom,            ~palette,           ~options,
"subject_id",      "",       "",       "text",           NA,                 list(hjust = 0, width = 3),
"v1",       "",       "v1",     "funkyrect",     "palette1",          list(),
"v2",       "",       "v2",     "funkyrect",     "palette2",          list(),
"v3",       "",       "v3",     "funkyrect",     "palette3",          list(),
"v4",       "",       "v4",     "funkyrect",     "palette4",          list(),
"v5",       "",       "v5",     "funkyrect",     "palette5",          list(),
"v6",       "",       "v6",     "funkyrect",     "palette6",          list(),
"v7",       "",       "v7",     "funkyrect",     "palette7",          list(),
"v8",       "",       "v8",     "funkyrect",     "palette8",          list(),
"v9",       "",       "v9",     "funkyrect",     "palette9",          list(),
"v10",      "",      "v10",     "funkyrect",     "palette10",         list(),
"v11",      "",      "v11",     "funkyrect",     "palette11",         list(),
)
e
funky_heatmap(RNAseq_sel, column_info = column_info, scale_column = FALSE,
palettes =  list(palette1 = "#0F9D58", palette2 = "#DB4437", palette3 = "#F4B400", palette4 = "#B00068",
palette5 = "#2ED9FF",  palette6 = "#F7E1A0", palette7 = "#D85FF7",  palette8 = "#16FF32",
palette9 = "#FF00B6", palette10 = "#0000FF", palette11 = "#AAF400"),
expand = list(xmax = 1), col_annot_angle = 90)
pdf("RNAseq data available.pdf", width = 10, height = 20)
funky_heatmap(RNAseq_sel, column_info = column_info, scale_column = FALSE,
palettes =  list(palette1 = "#0F9D58", palette2 = "#DB4437", palette3 = "#F4B400", palette4 = "#B00068",
palette5 = "#2ED9FF",  palette6 = "#F7E1A0", palette7 = "#D85FF7",  palette8 = "#16FF32",
palette9 = "#FF00B6", palette10 = "#0000FF", palette11 = "#AAF400"),
expand = list(xmax = 1), col_annot_angle = 90)
dev.off()
pdf("CellFreq data available.pdf", width = 10, height = 20)
funky_heatmap(CellFreq_sel, column_info = column_info, scale_column = FALSE,
palettes =  list(palette1 = "#0F9D58", palette2 = "#DB4437", palette3 = "#F4B400", palette4 = "#B00068",
palette5 = "#2ED9FF",  palette6 = "#F7E1A0", palette7 = "#D85FF7",  palette8 = "#16FF32",
palette9 = "#FF00B6", palette10 = "#0000FF", palette11 = "#AAF400"),
expand = list(xmax = 1), col_annot_angle = 90)
dev.off()
pdf("Ab data available.pdf", width = 10, height = 20)
funky_heatmap(Ab_sel, column_info = column_info, scale_column = FALSE,
palettes =  list(palette1 = "#0F9D58", palette2 = "#DB4437", palette3 = "#F4B400", palette4 = "#B00068",
palette5 = "#2ED9FF",  palette6 = "#F7E1A0", palette7 = "#D85FF7",  palette8 = "#16FF32",
palette9 = "#FF00B6", palette10 = "#0000FF", palette11 = "#AAF400"),
expand = list(xmax = 1), col_annot_angle = 90)
dev.off()
pdf("Cytokine data available.pdf", width = 10, height = 20)
funky_heatmap(Cytokine_sel, column_info = column_info, scale_column = FALSE,
palettes =  list(palette1 = "#0F9D58", palette2 = "#DB4437", palette3 = "#F4B400", palette4 = "#B00068",
palette5 = "#2ED9FF",  palette6 = "#F7E1A0", palette7 = "#D85FF7",  palette8 = "#16FF32",
palette9 = "#FF00B6", palette10 = "#0000FF", palette11 = "#AAF400"),
expand = list(xmax = 1), col_annot_angle = 90)
dev.off()
